/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parse = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,6],$V2=[1,11],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,19],$V7=[1,18],$V8=[5,7,10,18,22,25,56,59,62],$V9=[1,21],$Va=[1,23],$Vb=[5,7,9,10,11,12,18,22,25,44,45,53,54,55,56,59,62,84,105,106,110,117,119,121,122],$Vc=[1,30],$Vd=[2,7],$Ve=[2,9],$Vf=[1,32],$Vg=[9,11,12,32,35,41,58,69,70,71,72,73,74,75,76,77,78,79,80,108],$Vh=[1,40],$Vi=[10,44,45,56,59,62,84],$Vj=[1,46],$Vk=[1,47],$Vl=[1,56],$Vm=[10,27,48,50,84],$Vn=[10,58],$Vo=[1,79],$Vp=[1,80],$Vq=[1,81],$Vr=[11,12,53,54,55],$Vs=[10,11,12,35],$Vt=[2,26],$Vu=[1,105],$Vv=[1,104],$Vw=[9,10,11,12,53,54,55,56,59,62,105,106,110,117,119,121,122],$Vx=[11,12],$Vy=[32,34],$Vz=[1,146],$VA=[1,149],$VB=[1,143],$VC=[1,145],$VD=[1,147],$VE=[1,148],$VF=[1,152],$VG=[1,153],$VH=[1,154],$VI=[1,160],$VJ=[1,161],$VK=[1,162],$VL=[9,10,11,12,53,54,55,105,106,110,117,119,121,122],$VM=[9,10,11,12,53,54,55,105,106,110,117,119,120,121,122],$VN=[1,190],$VO=[1,185],$VP=[1,182],$VQ=[1,184],$VR=[1,180],$VS=[1,181],$VT=[1,186],$VU=[1,197],$VV=[1,201],$VW=[1,202],$VX=[1,203],$VY=[1,211],$VZ=[41,58],$V_=[1,219],$V$=[1,220],$V01=[1,233],$V11=[1,222],$V21=[1,223],$V31=[1,224],$V41=[1,225],$V51=[1,226],$V61=[1,227],$V71=[1,228],$V81=[1,229],$V91=[1,230],$Va1=[1,231],$Vb1=[1,232],$Vc1=[1,234],$Vd1=[32,35,41,58,69,70,71,72,73,74,75,76,77,78,79,80,108],$Ve1=[58,112],$Vf1=[1,287],$Vg1=[32,41,58,69,70,71,72,73,108],$Vh1=[32,41,58,69,70,71,72,73,74,75,76,77,108],$Vi1=[32,41,58,69,70,71,72,73,74,75,76,77,78,79,108];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"models":4,"EOF":5,"model":6,"namespace":7,"name":8,"{":9,"}":10,".":11,"Identifier":12,"name-pair":13,"import-spec":14,"type":15,"interface-spec":16,"component-spec":17,"Import":18,"enum-spec":19,"extern-spec":20,"subint-spec":21,"interface":22,"events-types":23,"behaviour-spec":24,"component":25,"ports":26,"system":27,"instances-binds":28,"instance-bind":29,"instance":30,"bind":31,";":32,"wildcard":33,"<=>":34,"*":35,"event-type":36,"event":37,"event-direction":38,"variable-type":39,"(":40,")":41,"formals":42,"formal-direction":43,"in":44,"out":45,"inout":46,"port":47,"provides":48,"external":49,"requires":50,"injected":51,"optional-types":52,"bool":53,"int":54,"void":55,"enum":56,"enum-fields":57,",":58,"subint":59,"NumericLiteral":60,"..":61,"extern":62,"Data":63,"expression":64,"expr":65,"false":66,"true":67,"!":68,"&&":69,"||":70,"<-":71,"==":72,"!=":73,"<":74,"<=":75,">":76,">=":77,"+":78,"-":79,"/":80,"function-call":81,"action":82,"arguments":83,"behaviour":84,"optional-identifier":85,"functions-statements-variables":86,"function":87,"compound-statement":88,"formal":89,"statements":90,"statement-variable":91,"statement":92,"variable":93,"function-statement-variable":94,"blocking-statement":95,"function-call-statement":96,"guarded-statement":97,"on-event-statement":98,"illegal-statement":99,"assignment-statement":100,"action-statement":101,"if-statement":102,"reply-statement":103,"return-statement":104,"blocking":105,"[":106,"guard":107,"]":108,"otherwise":109,"on":110,"trigger-spec":111,":":112,"triggers":113,"optional":114,"inevitable":115,"trigger":116,"illegal":117,"=":118,"if":119,"else":120,"reply":121,"return":122,"variables":123,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"namespace",9:"{",10:"}",11:".",12:"Identifier",18:"Import",22:"interface",25:"component",27:"system",32:";",34:"<=>",35:"*",40:"(",41:")",44:"in",45:"out",46:"inout",48:"provides",49:"external",50:"requires",51:"injected",53:"bool",54:"int",55:"void",56:"enum",58:",",59:"subint",60:"NumericLiteral",61:"..",62:"extern",63:"Data",66:"false",67:"true",68:"!",69:"&&",70:"||",71:"<-",72:"==",73:"!=",74:"<",75:"<=",76:">",77:">=",78:"+",79:"-",80:"/",84:"behaviour",105:"blocking",106:"[",108:"]",109:"otherwise",110:"on",112:":",114:"optional",115:"inevitable",117:"illegal",118:"=",119:"if",120:"else",121:"reply",122:"return"},
productions_: [0,[3,2],[3,1],[4,0],[4,2],[4,6],[8,2],[8,1],[8,3],[13,1],[13,3],[6,1],[6,1],[6,1],[6,1],[14,1],[15,1],[15,1],[15,1],[16,5],[16,6],[17,4],[17,5],[17,6],[17,8],[17,9],[28,0],[28,2],[29,1],[29,1],[30,3],[31,4],[31,4],[31,4],[31,4],[33,1],[33,3],[23,0],[23,2],[36,1],[36,1],[37,6],[37,7],[43,1],[43,1],[43,1],[38,1],[38,1],[26,1],[26,2],[47,4],[47,5],[47,4],[47,5],[47,5],[52,0],[52,2],[39,1],[39,1],[39,1],[39,1],[19,6],[57,1],[57,3],[21,8],[20,4],[64,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,3],[65,2],[65,3],[65,3],[65,3],[65,3],[65,3],[65,3],[65,3],[65,3],[65,3],[65,3],[65,3],[65,3],[65,3],[65,1],[65,1],[81,3],[81,4],[83,1],[83,3],[24,5],[24,6],[85,0],[85,1],[87,5],[87,6],[42,1],[42,3],[89,2],[89,3],[90,0],[90,2],[91,1],[91,1],[86,1],[86,2],[94,1],[94,1],[94,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[95,2],[96,2],[97,4],[107,1],[107,1],[88,3],[98,4],[111,1],[111,1],[111,1],[113,1],[113,3],[116,1],[116,3],[116,3],[116,5],[116,4],[116,6],[99,2],[100,4],[82,3],[82,4],[101,2],[101,2],[102,5],[102,7],[103,5],[103,4],[103,6],[103,7],[104,2],[104,3],[93,3],[93,5],[123,1],[123,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$;
break;
case 2:

      //process.stderr.write ('parse error: no models found\n');
      // process.exit (1);
      //throw 'parse error: no models found\n';
      this.$ = [];
      return this.$;
    
break;
case 3:
this.$ = new ast.Root ([]);
break;
case 4: case 27: case 38: case 49: case 56: case 104: case 108: case 158:
this.$ = $$[$0-1]; this.$.elements = this.$.elements.concat ([$$[$0]]);
break;
case 5:
this.$ = $$[$0-5]; this.$.elements.concat ($$[$0-1].elements.map (function (m) {return ast.add_scope ($$[$0-3], m);}));
break;
case 6:
this.$ = new ast.Name (['*global*', $$[$0]], loc (null, _$[$0-1], _$[$0]));
break;
case 8:
this.$ = new ast.Name ($$[$0-2].elements.concat ([$$[$0]]), loc (null, _$[$0-2], _$[$0]));
break;
case 9:
this.$ = new ast.Name ([$$[$0]], loc (null, _$[$0], _$[$0]));
break;
case 10:
this.$ = new ast.Name ([$$[$0-2], $$[$0]], loc (null, _$[$0-2], _$[$0]));
break;
case 15:
this.$ = new ast.Import ($$[$0], loc (null, _$[$0], _$[$0]));
break;
case 19:
this.$ = new ast.Interface ($$[$0-3], null, $$[$0-1], null, loc (null, _$[$0-4], _$[$0]));
break;
case 20:
this.$ = new ast.Interface ($$[$0-4], null, $$[$0-2], $$[$0-1], loc (null, _$[$0-5], _$[$0]));
break;
case 21:
this.$ = new ast.Component ($$[$0-2], null, null, loc (null, _$[$0-3], _$[$0]));
break;
case 22:
this.$ = new ast.Component ($$[$0-3], $$[$0-1], null, loc (null, _$[$0-4], _$[$0]));
break;
case 23:
this.$ = new ast.Component ($$[$0-4], $$[$0-2], $$[$0-1], loc (null, _$[$0-5], _$[$0]));
break;
case 24:
this.$ = new ast.System ($$[$0-6], null, $$[$0-2], null, loc (null, _$[$0-7], _$[$0]));
break;
case 25:
this.$ = new ast.System ($$[$0-7], $$[$0-5], $$[$0-2], null, loc (null, _$[$0-8], _$[$0]));
break;
case 26:
this.$ = new ast.Instances ([]);
break;
case 30:
this.$ = new ast.Instance ($$[$0-2], $$[$0-1], loc (null, _$[$0-2], _$[$0]));
break;
case 31:
this.$ = new ast.Bind ($$[$0-3], $$[$0-1], loc(null, _$[$0-3], _$[$0]));
break;
case 32:
this.$ = new ast.Bind ($$[$0-3], new ast.Binding (prep($$[$0-1]), last($$[$0-1]), $$[$0-1].loc), loc(null, _$[$0-3], _$[$0]));
break;
case 33:
this.$ = new ast.Bind (new ast.Binding (prep($$[$0-3]), last($$[$0-3]), $$[$0-3].loc), $$[$0-1], loc(null, _$[$0-3], _$[$0]));
break;
case 34:
this.$ = new ast.Bind (new ast.Binding (prep($$[$0-3]), last($$[$0-3]), $$[$0-3].loc), new ast.Binding (prep($$[$0-1]), last($$[$0-1]), $$[$0-1].loc), loc(null, _$[$0-3], _$[$0]));
break;
case 35:
this.$ = new ast.Binding (false, '*', loc (null, _$[$0], _$[$0]));
break;
case 36:
this.$ = new ast.Binding ($$[$0-2], '*', loc (null, _$[$0-2], _$[$0]));
break;
case 37:
this.$ = new ast.Events ([]);
break;
case 41:
this.$ = new ast.Event ($$[$0-5], new ast.Signature ($$[$0-4], null), $$[$0-3], loc (null, _$[$0-5], _$[$0]));
break;
case 42:
this.$ = new ast.Event ($$[$0-6], new ast.Signature ($$[$0-5], $$[$0-2]), $$[$0-4], loc (null, _$[$0-6], _$[$0]));
break;
case 43: case 46:
this.$ = 'in';
break;
case 44: case 47:
this.$ = 'out';
break;
case 45:
this.$ = 'inout';
break;
case 48:
this.$ = new ast.Ports ([$$[$0]]);
break;
case 50:
this.$ = new ast.Port ('provides', $$[$0-2], $$[$0-1], false, false, loc (null, _$[$0-3], _$[$0-1]));
break;
case 51:
this.$ = new ast.Port ('provides', $$[$0-2], $$[$0-1], $$[$0-3], false, loc (null, _$[$0-4], _$[$0-2]));
break;
case 52:
this.$ = new ast.Port ('requires', $$[$0-2], $$[$0-1], false, false, loc (null, _$[$0-3], _$[$0-1]));
break;
case 53:
this.$ = new ast.Port ('requires', $$[$0-2], $$[$0-1], false, $$[$0-3], loc (null, _$[$0-4], _$[$0-2]));
break;
case 54:
this.$ = new ast.Port ('requires', $$[$0-2], $$[$0-1], $$[$0-3], false, loc (null, _$[$0-4], _$[$0-2]));
break;
case 55:
this.$ = new ast.Types ([]);
break;
case 57:
this.$ = new ast.Type ('bool', false, loc (null, _$[$0], _$[$0]));
break;
case 58:
this.$ = new ast.Type ('int', false, loc (null, _$[$0], _$[$0]));
break;
case 59:
this.$ = new ast.Type ('void', false, loc (null, _$[$0], _$[$0]));
break;
case 60:
this.$ = new ast.Type ($$[$0], false, loc (null, _$[$0], _$[$0]));
break;
case 61:
this.$ = new ast.Enum (new ast.Name ([$$[$0-4]]), $$[$0-2], loc (null, _$[$0-5], _$[$0-2]));
break;
case 62:
this.$ = [$$[$0]];
break;
case 63:
this.$ = $$[$0-2]; this.$ = this.$.concat ([$$[$0]]);
break;
case 64:
this.$ = new ast.Int (new ast.Name ([$$[$0-6]]), new ast.Range ($$[$0-4], $$[$0-2]));
break;
case 65:
this.$ = new ast.Extern (new ast.Name ([$$[$0-2]]), $$[$0-1], loc (null, _$[$0-3], _$[$0]));
break;
case 66:
this.$ = new ast.Expression ($$[$0]);
break;
case 67:
this.$ = 'false';
break;
case 68:
this.$ = 'true';
break;
case 71:
this.$ = new ast.Data ($$[$0], loc (null, _$[$0], _$[$0]));
break;
case 72:
this.$ = new ast.Group ($$[$0-1], loc (null, _$[$0-2], _$[$0-2]));
break;
case 73:
this.$ = new ast.Not ($$[$0], loc (null, _$[$0-1], _$[$0-1]));
break;
case 74:
this.$ = new ast.And ($$[$0-2], $$[$0], loc (null, _$[$0-2], _$[$0-2]));
break;
case 75:
this.$ = new ast.Or ($$[$0-2], $$[$0], loc (null, _$[$0-2], _$[$0-2]));
break;
case 76: case 77:
this.$ = new ast.Equals ($$[$0-2], $$[$0], loc (null, _$[$0-2], _$[$0-2]));
break;
case 78:
this.$ = new ast.NotEquals ($$[$0-2], $$[$0], loc (null, _$[$0-2], _$[$0-2]));
break;
case 79:
this.$ = new ast.Less ($$[$0-2], $$[$0], loc (null, _$[$0-2], _$[$0-2]));
break;
case 80:
this.$ = new ast.LessEqual ($$[$0-2], $$[$0], loc (null, _$[$0-2], _$[$0-2]));
break;
case 81:
this.$ = new ast.Greater ($$[$0-2], $$[$0], loc (null, _$[$0-2], _$[$0-2]));
break;
case 82:
this.$ = new ast.GreaterEqual ($$[$0-2], $$[$0], loc (null, _$[$0-2], _$[$0-2]));
break;
case 83:
this.$ = new ast.Plus ($$[$0-2], $$[$0], loc (null, _$[$0-2], _$[$0-2]));
break;
case 84:
this.$ = new ast.Minus ($$[$0-2], $$[$0], loc (null, _$[$0-2], _$[$0-2]));
break;
case 85:
this.$ = new ast.Multiply ($$[$0-2], $$[$0], loc (null, _$[$0-2], _$[$0-2]));
break;
case 86:
this.$ = new ast.Divide ($$[$0-2], $$[$0], loc (null, _$[$0-2], _$[$0-2]));
break;
case 89:
this.$ = new ast.Call ($$[$0-2], false, loc (null, _$[$0-2], _$[$0]));
break;
case 90:
this.$ = new ast.Call ($$[$0-3], $$[$0-1], loc (null, _$[$0-3], _$[$0]));
break;
case 91:
this.$ = new ast.Arguments ([$$[$0]], loc (null, _$[$0], _$[$0]));
break;
case 92:
this.$ = $$[$0-2]; this.$.elements = this.$.elements.concat ([$$[$0]]); this.$.loc = loc (null, _$[$0-2], _$[$0]);
break;
case 93:
this.$ = new ast.Behaviour ($$[$0-3], $$[$0-1], null, null, null, loc (null, _$[$0-4], _$[$0]));
break;
case 94:
this.$ = new ast.Behaviour ($$[$0-4], $$[$0-2], null, null, $$[$0-1], loc (null, _$[$0-5], _$[$0]));
break;
case 95:
this.$ = false;
break;
case 97:
this.$ = new ast.Function ($$[$0-3], new ast.Signature ($$[$0-4], null, loc (null, _$[$0-4], _$[$0-1])), $$[$0], loc (null, _$[$0-4], _$[$0]));
break;
case 98:
this.$ = new ast.Function ($$[$0-4], new ast.Signature ($$[$0-5], $$[$0-2], loc (null, _$[$0-5], _$[$0-1])), $$[$0], loc (null, _$[$0-5], _$[$0]));
break;
case 99:
this.$ = new ast.Formals ([$$[$0]], loc (null, _$[$0], _$[$0]));
break;
case 100: case 134:
this.$ = $$[$0-2]; this.$.elements = this.$.elements.concat ([$$[$0]]);
break;
case 101:
this.$ = new ast.Formal ($$[$0], $$[$0-1], false, loc (null, _$[$0-1], _$[$0]));
break;
case 102:
this.$ = new ast.Formal ($$[$0], $$[$0-1], $$[$0-2], loc (null, _$[$0-2], _$[$0-1]));
break;
case 103:
this.$ = new ast.Compound ([]);
break;
case 107:
this.$ = new ast.Compound ([$$[$0]]);
break;
case 123:
this.$ = new ast.Blocking ($$[$0], loc (null, $$[$0-1], $$[$0]));
break;
case 125:
this.$ = new ast.Guard ($$[$0-2], $$[$0], loc (null, $$[$0-2], $$[$0]));
break;
case 127:
this.$ = new ast.Otherwise ();
break;
case 128:
this.$ = $$[$0-1]; this.$.loc = loc (null, _$[$0-2], _$[$0]);
break;
case 129:
this.$ = new ast.On ($$[$0-2], $$[$0], loc (null, _$[$0-3], _$[$0]));
break;
case 130:
this.$ = $$[$0];
break;
case 131: case 132:
this.$ = new ast.Triggers ([new ast.Trigger (false, $$[$0])], loc (null, _$[$0], _$[$0]));
break;
case 133:
this.$ = new ast.Triggers ([$$[$0]]);
break;
case 135:
this.$ = new ast.Trigger (false, $$[$0], null, loc (null, _$[$0], _$[$0]));
break;
case 136:
this.$ = new ast.Trigger (false, $$[$0-2], [], loc (null, _$[$0-2], _$[$0]));
break;
case 137:
this.$ = new ast.Trigger ($$[$0-2], $$[$0], null, loc (null, _$[$0-2], _$[$0]));
break;
case 138:
this.$ = new ast.Trigger ($$[$0-4], $$[$0-2], [], loc (null, _$[$0-4], _$[$0]));
break;
case 139:
this.$ = new ast.Trigger (null, $$[$0-3], $$[$0-1], loc (null, _$[$0-3], _$[$01]));
break;
case 140:
this.$ = new ast.Trigger ($$[$0-5], $$[$0-3], $$[$0-1], loc (null, _$[$0-5], _$[$0-1]));
break;
case 141:
this.$ = new ast.Illegal (loc (null, _$[$0-1], _$[$0]));
break;
case 142:
this.$ = new ast.Assign ($$[$0-3], $$[$0-1], loc (null, _$[$0-3], _$[$0-2]));
break;
case 143:
this.$ = new ast.Action (new ast.Trigger ($$[$0-2].elements[0], $$[$0-2].elements[1]), loc (null, _$[$0-2], _$[$0]));
break;
case 144:
this.$ = new ast.Action (new ast.Trigger ($$[$0-3].elements[0], $$[$0-3].elements[1], $$[$0-1]), loc (null, _$[$0-3], _$[$0]));
break;
case 145:
this.$ = new ast.Action (new ast.Trigger ($$[$0-1].elements[0], $$[$0-1].elements[1]), loc (null, _$[$0-1], _$[$0]));
break;
case 147:
this.$ = new ast.If ($$[$0-2], $$[$0], null, loc (null, _$[$0-4], _$[$0]));
break;
case 148:
this.$ = new ast.If ($$[$0-4], $$[$0-2], $$[$0], loc (null, _$[$0-6], _$[$0-2]));
break;
case 149:
this.$ = new ast.Reply ($$[$0-2], null, loc (null, _$[$0-4], _$[$0-3]));
break;
case 150:
this.$ = new ast.Reply (null, null, loc (null, _$[$0-3], _$[$0-2]));
break;
case 151:
this.$ = new ast.Reply (null, $$[$0-5], loc (null, _$[$0-5], _$[$0-4]));
break;
case 152:
this.$ = new ast.Reply ($$[$0-3], $$[$0-6], loc (null, _$[$0-6], _$[$0-5]));
break;
case 153:
this.$ = new ast.Return (null, loc (null, _$[$0-1], _$[$0]));
break;
case 154:
this.$ = new ast.Return ($$[$0-1], loc (null, _$[$0-2], _$[$0-1]));
break;
case 155:
this.$ = new ast.Variable ($$[$0-1], $$[$0-2], new ast.Expression (), loc (null, _$[$0-2], _$[$0]));
break;
case 156:
this.$ = new ast.Variable ($$[$0-3], $$[$0-4], $$[$0-1], loc (null, _$[$0-4], _$[$0]));
break;
case 157:
this.$ = new ast.Variables ([$$[$0]]);
break;
}
},
table: [o([5,7,18,22,25,56,59,62],$V0,{3:1,4:2,2:[1,3]}),{1:[3]},{5:[1,4],6:5,7:$V1,14:7,15:8,16:9,17:10,18:$V2,19:12,20:13,21:14,22:$V3,25:$V4,56:$V5,59:$V6,62:$V7},{1:[2,2]},{1:[2,1]},o($V8,[2,4]),{8:20,11:$V9,12:$Va,13:22},o($V8,[2,11]),o($V8,[2,12]),o($V8,[2,13]),o($V8,[2,14]),o($V8,[2,15]),o($Vb,[2,16]),o($Vb,[2,17]),o($Vb,[2,18]),{8:24,11:$V9,12:$Va,13:22},{8:25,11:$V9,12:$Va,13:22},{12:[1,26]},{12:[1,27]},{12:[1,28]},{9:[1,29],11:$Vc},{12:[1,31]},o([9,11,12],$Vd),o([9,12],$Ve,{11:$Vf}),{9:[1,33],11:$Vc},{9:[1,34],11:$Vc},{9:[1,35]},{63:[1,36]},{9:[1,37]},o([7,10,18,22,25,56,59,62],$V0,{4:38}),{12:[1,39]},o($Vg,[2,6]),{12:$Vh},o($Vi,[2,37],{23:41}),{10:[1,42],26:43,27:[1,44],47:45,48:$Vj,50:$Vk},{12:[1,49],57:48},{32:[1,50]},{60:[1,51]},{6:5,7:$V1,10:[1,52],14:7,15:8,16:9,17:10,18:$V2,19:12,20:13,21:14,22:$V3,25:$V4,56:$V5,59:$V6,62:$V7},o($Vg,[2,8]),o([9,11,12,32,34,35,40,41,58,69,70,71,72,73,74,75,76,77,78,79,80,108],[2,10]),{10:[1,53],15:58,19:12,20:13,21:14,24:54,36:55,37:57,38:59,44:[1,60],45:[1,61],56:$V5,59:$V6,62:$V7,84:$Vl},o($V8,[2,21]),{10:[1,62],24:63,27:[1,64],47:65,48:$Vj,50:$Vk,84:$Vl},{9:[1,66]},o($Vm,[2,48]),{8:67,11:$V9,12:$Va,13:22,49:[1,68]},{8:69,11:$V9,12:$Va,13:22,49:[1,71],51:[1,70]},{10:[1,72],58:[1,73]},o($Vn,[2,62]),o($Vb,[2,65]),{61:[1,74]},o($V8,[2,5]),o($V8,[2,19]),{10:[1,75]},o($Vi,[2,38]),{9:[2,95],12:[1,77],85:76},o($Vi,[2,39]),o($Vi,[2,40]),{8:82,11:$V9,12:$Va,13:22,39:78,53:$Vo,54:$Vp,55:$Vq},o($Vr,[2,46]),o($Vr,[2,47]),o($V8,[2,22]),{10:[1,83]},{9:[1,84]},o($Vm,[2,49]),o($Vs,$Vt,{28:85}),{11:$Vc,12:[1,86]},{8:87,11:$V9,12:$Va,13:22},{11:$Vc,12:[1,88]},{8:89,11:$V9,12:$Va,13:22},{8:90,11:$V9,12:$Va,13:22},{32:[1,91]},{12:[1,92]},{60:[1,93]},o($V8,[2,20]),{9:[1,94]},{9:[2,96]},{12:[1,95]},{12:[2,57]},{12:[2,58]},{12:[2,59]},{11:$Vc,12:[2,60]},o($V8,[2,23]),o($Vs,$Vt,{28:96}),{8:101,10:[1,97],11:$V9,12:$Vu,13:103,29:98,30:99,31:100,33:102,35:$Vv},{32:[1,106]},{11:$Vc,12:[1,107]},{32:[1,108]},{11:$Vc,12:[1,109]},{11:$Vc,12:[1,110]},o($Vb,[2,61]),o($Vn,[2,63]),{10:[1,111]},o($Vw,[2,55],{52:112}),{40:[1,113]},{8:101,10:[1,114],11:$V9,12:$Vu,13:103,29:98,30:99,31:100,33:102,35:$Vv},{10:[1,115]},o($Vs,[2,27]),o($Vs,[2,28]),o($Vs,[2,29]),{11:$Vc,12:[1,116]},{34:[1,117]},o($Vx,$Vd,{34:[1,118]}),o($Vy,[2,35]),o([12,32,34],$Ve,{11:[1,119]}),o($Vm,[2,50]),{32:[1,120]},o($Vm,[2,52]),{32:[1,121]},{32:[1,122]},{32:[1,123]},{8:82,9:$Vz,10:[1,124],11:$V9,12:$VA,13:150,15:126,19:12,20:13,21:14,39:142,53:$Vo,54:$Vp,55:$Vq,56:$V5,59:$V6,62:$V7,81:144,82:151,86:125,87:129,88:134,92:128,93:130,94:127,95:131,96:132,97:133,98:135,99:136,100:137,101:138,102:139,103:140,104:141,105:$VB,106:$VC,110:$VD,117:$VE,119:$VF,121:$VG,122:$VH},{8:82,11:$V9,12:$Va,13:22,39:158,41:[1,155],42:156,43:159,44:$VI,45:$VJ,46:$VK,53:$Vo,54:$Vp,55:$Vq,89:157},{10:[1,163]},o($V8,[2,24]),{32:[1,164]},{12:$Vu,13:166,33:165,35:$Vv},{12:$Vu,13:168,33:167,35:$Vv},{12:$Vh,35:[1,169]},o($Vm,[2,51]),o($Vm,[2,53]),o($Vm,[2,54]),o($Vb,[2,64]),{10:[2,93]},{8:82,9:$Vz,10:[1,170],11:$V9,12:$VA,13:150,39:142,53:$Vo,54:$Vp,55:$Vq,81:144,82:151,87:129,88:134,92:128,93:130,94:171,95:131,96:132,97:133,98:135,99:136,100:137,101:138,102:139,103:140,104:141,105:$VB,106:$VC,110:$VD,117:$VE,119:$VF,121:$VG,122:$VH},o($Vw,[2,56]),o($VL,[2,107]),o($VL,[2,109]),o($VL,[2,110]),o($VL,[2,111]),o($VM,[2,112]),o($VM,[2,113]),o($VM,[2,114]),o($VM,[2,115]),o($VM,[2,116]),o($VM,[2,117]),o($VM,[2,118]),o($VM,[2,119]),o($VM,[2,120]),o($VM,[2,121]),o($VM,[2,122]),{12:[1,172]},{9:$Vz,12:$VA,13:174,81:144,82:151,88:134,92:173,95:131,96:132,97:133,98:135,99:136,100:137,101:138,102:139,103:140,104:141,105:$VB,106:$VC,110:$VD,117:$VE,119:$VF,121:$VG,122:$VH},{32:[1,175]},{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,64:177,65:179,66:$VR,67:$VS,68:$VT,81:187,82:188,107:176,109:[1,178]},o($VL,[2,103],{90:191}),{12:$VU,111:192,113:193,114:[1,194],115:[1,195],116:196},{32:[1,198]},o([12,32],$Ve,{11:[1,200],40:$VV,118:[1,199]}),o($Vx,$Vd,{32:$VW,40:$VX}),{32:[1,204]},{40:[1,205]},{40:[1,206]},{8:183,11:$V9,12:$VN,13:189,32:[1,207],40:$VO,60:$VP,63:$VQ,64:208,65:179,66:$VR,67:$VS,68:$VT,81:187,82:188},{32:[1,209]},{41:[1,210],58:$VY},o($VZ,[2,99]),{12:[1,212]},{8:82,11:$V9,12:$Va,13:22,39:213,53:$Vo,54:$Vp,55:$Vq},o($Vr,[2,43]),o($Vr,[2,44]),o($Vr,[2,45]),o($V8,[2,25]),o($Vs,[2,30]),{32:[1,214]},{32:[1,215]},{32:[1,216]},{32:[1,217]},o($Vy,[2,36]),{10:[2,94]},o($VL,[2,108]),{32:$V_,40:[1,218],118:$V$},o($VM,[2,123]),{32:$VW,40:$VX},o($VM,[2,124]),{108:[1,221]},{108:[2,126]},{108:[2,127]},o([32,41,58,108],[2,66],{35:$V01,69:$V11,70:$V21,71:$V31,72:$V41,73:$V51,74:$V61,75:$V71,76:$V81,77:$V91,78:$Va1,79:$Vb1,80:$Vc1}),o($Vd1,[2,67]),o($Vd1,[2,68]),o($Vd1,[2,69]),o($Vd1,[2,70],{11:$Vc}),o($Vd1,[2,71]),{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,65:235,66:$VR,67:$VS,68:$VT,81:187,82:188},{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,65:236,66:$VR,67:$VS,68:$VT,81:187,82:188},o($Vd1,[2,87]),o($Vd1,[2,88]),o([11,32,35,41,58,69,70,71,72,73,74,75,76,77,78,79,80,108],$Vd,{40:$VX}),o($Vd1,$Ve,{11:$Vf,40:$VV}),{8:82,9:$Vz,10:[1,237],11:$V9,12:$VA,13:150,39:241,53:$Vo,54:$Vp,55:$Vq,81:144,82:151,88:134,91:238,92:239,93:240,95:131,96:132,97:133,98:135,99:136,100:137,101:138,102:139,103:140,104:141,105:$VB,106:$VC,110:$VD,117:$VE,119:$VF,121:$VG,122:$VH},{112:[1,242]},{58:[1,243],112:[2,130]},{112:[2,131]},{112:[2,132]},o($Ve1,[2,133]),o($Ve1,[2,135],{11:[1,245],40:[1,244]}),o($VM,[2,141]),{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,64:246,65:179,66:$VR,67:$VS,68:$VT,81:187,82:188},{12:$Vh,121:[1,247]},{8:183,11:$V9,12:$VN,13:189,40:$VO,41:[1,248],60:$VP,63:$VQ,64:250,65:179,66:$VR,67:$VS,68:$VT,81:187,82:188,83:249},o($VM,[2,145]),{8:183,11:$V9,12:$VN,13:189,40:$VO,41:[1,251],60:$VP,63:$VQ,64:250,65:179,66:$VR,67:$VS,68:$VT,81:187,82:188,83:252},o($VM,[2,146]),{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,64:253,65:179,66:$VR,67:$VS,68:$VT,81:187,82:188},{8:183,11:$V9,12:$VN,13:189,40:$VO,41:[1,255],60:$VP,63:$VQ,64:254,65:179,66:$VR,67:$VS,68:$VT,81:187,82:188},o($VM,[2,153]),{32:[1,256]},o($Vi,[2,41]),{32:[1,257]},{8:82,11:$V9,12:$Va,13:22,39:158,43:159,44:$VI,45:$VJ,46:$VK,53:$Vo,54:$Vp,55:$Vq,89:258},o($VZ,[2,101]),{12:[1,259]},o($Vs,[2,31]),o($Vs,[2,32]),o($Vs,[2,33]),o($Vs,[2,34]),{8:82,11:$V9,12:$Va,13:22,39:158,41:[1,260],42:261,43:159,44:$VI,45:$VJ,46:$VK,53:$Vo,54:$Vp,55:$Vq,89:157},o($VL,[2,155]),{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,64:262,65:179,66:$VR,67:$VS,68:$VT,81:187,82:188},{9:$Vz,12:$VA,13:174,81:144,82:151,88:134,92:263,95:131,96:132,97:133,98:135,99:136,100:137,101:138,102:139,103:140,104:141,105:$VB,106:$VC,110:$VD,117:$VE,119:$VF,121:$VG,122:$VH},{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,65:264,66:$VR,67:$VS,68:$VT,81:187,82:188},{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,65:265,66:$VR,67:$VS,68:$VT,81:187,82:188},{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,65:266,66:$VR,67:$VS,68:$VT,81:187,82:188},{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,65:267,66:$VR,67:$VS,68:$VT,81:187,82:188},{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,65:268,66:$VR,67:$VS,68:$VT,81:187,82:188},{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,65:269,66:$VR,67:$VS,68:$VT,81:187,82:188},{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,65:270,66:$VR,67:$VS,68:$VT,81:187,82:188},{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,65:271,66:$VR,67:$VS,68:$VT,81:187,82:188},{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,65:272,66:$VR,67:$VS,68:$VT,81:187,82:188},{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,65:273,66:$VR,67:$VS,68:$VT,81:187,82:188},{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,65:274,66:$VR,67:$VS,68:$VT,81:187,82:188},{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,65:275,66:$VR,67:$VS,68:$VT,81:187,82:188},{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,65:276,66:$VR,67:$VS,68:$VT,81:187,82:188},{35:$V01,41:[1,277],69:$V11,70:$V21,71:$V31,72:$V41,73:$V51,74:$V61,75:$V71,76:$V81,77:$V91,78:$Va1,79:$Vb1,80:$Vc1},o($Vd1,[2,73]),o($VM,[2,128]),o($VL,[2,104]),o($VL,[2,105]),o($VL,[2,106]),{12:[1,278]},{9:$Vz,12:$VA,13:174,81:144,82:151,88:134,92:279,95:131,96:132,97:133,98:135,99:136,100:137,101:138,102:139,103:140,104:141,105:$VB,106:$VC,110:$VD,117:$VE,119:$VF,121:$VG,122:$VH},{12:$VU,116:280},{8:183,11:$V9,12:$VN,13:189,40:$VO,41:[1,281],60:$VP,63:$VQ,64:250,65:179,66:$VR,67:$VS,68:$VT,81:187,82:188,83:282},{12:[1,283]},{32:[1,284]},{40:[1,285]},o($Vd1,[2,89]),{41:[1,286],58:$Vf1},o($VZ,[2,91]),o($Vd1,[2,143]),{41:[1,288],58:$Vf1},{41:[1,289]},{41:[1,290]},{32:[1,291]},o($VM,[2,154]),o($Vi,[2,42]),o($VZ,[2,100]),o($VZ,[2,102]),{9:$Vz,88:292},{41:[1,293],58:$VY},{32:[1,294]},o($VM,[2,125]),o([32,41,58,69,70,71,108],[2,74],{35:$V01,72:$V41,73:$V51,74:$V61,75:$V71,76:$V81,77:$V91,78:$Va1,79:$Vb1,80:$Vc1}),o([32,41,58,70,71,108],[2,75],{35:$V01,69:$V11,72:$V41,73:$V51,74:$V61,75:$V71,76:$V81,77:$V91,78:$Va1,79:$Vb1,80:$Vc1}),o([32,41,58,71,108],[2,76],{35:$V01,69:$V11,70:$V21,72:$V41,73:$V51,74:$V61,75:$V71,76:$V81,77:$V91,78:$Va1,79:$Vb1,80:$Vc1}),o($Vg1,[2,77],{35:$V01,74:$V61,75:$V71,76:$V81,77:$V91,78:$Va1,79:$Vb1,80:$Vc1}),o($Vg1,[2,78],{35:$V01,74:$V61,75:$V71,76:$V81,77:$V91,78:$Va1,79:$Vb1,80:$Vc1}),o($Vh1,[2,79],{35:$V01,78:$Va1,79:$Vb1,80:$Vc1}),o($Vh1,[2,80],{35:$V01,78:$Va1,79:$Vb1,80:$Vc1}),o($Vh1,[2,81],{35:$V01,78:$Va1,79:$Vb1,80:$Vc1}),o($Vh1,[2,82],{35:$V01,78:$Va1,79:$Vb1,80:$Vc1}),o($Vi1,[2,83],{35:$V01,80:$Vc1}),o($Vi1,[2,84],{35:$V01,80:$Vc1}),o($Vd1,[2,85]),o($Vd1,[2,86]),o($Vd1,[2,72]),{32:$V_,118:$V$},o($VM,[2,129]),o($Ve1,[2,134]),o($Ve1,[2,136]),{41:[1,295],58:$Vf1},o($Ve1,[2,137],{40:[1,296]}),o($VM,[2,142]),{8:183,11:$V9,12:$VN,13:189,40:$VO,41:[1,297],60:$VP,63:$VQ,64:298,65:179,66:$VR,67:$VS,68:$VT,81:187,82:188},o($Vd1,[2,90]),{8:183,11:$V9,12:$VN,13:189,40:$VO,60:$VP,63:$VQ,64:299,65:179,66:$VR,67:$VS,68:$VT,81:187,82:188},o($Vd1,[2,144]),{9:$Vz,12:$VA,13:174,81:144,82:151,88:134,92:300,95:131,96:132,97:133,98:135,99:136,100:137,101:138,102:139,103:140,104:141,105:$VB,106:$VC,110:$VD,117:$VE,119:$VF,121:$VG,122:$VH},{32:[1,301]},o($VM,[2,150]),o($VL,[2,97]),{9:$Vz,88:302},o($VL,[2,156]),o($Ve1,[2,139]),{8:183,11:$V9,12:$VN,13:189,40:$VO,41:[1,303],60:$VP,63:$VQ,64:250,65:179,66:$VR,67:$VS,68:$VT,81:187,82:188,83:304},{32:[1,305]},{41:[1,306]},o($VZ,[2,92]),o($VL,[2,147],{120:[1,307]}),o($VM,[2,149]),o($VL,[2,98]),o($Ve1,[2,138]),{41:[1,308],58:$Vf1},o($VM,[2,151]),{32:[1,309]},{9:$Vz,12:$VA,13:174,81:144,82:151,88:134,92:310,95:131,96:132,97:133,98:135,99:136,100:137,101:138,102:139,103:140,104:141,105:$VB,106:$VC,110:$VD,117:$VE,119:$VF,121:$VG,122:$VH},o($Ve1,[2,140]),o($VM,[2,152]),o($VM,[2,148])],
defaultActions: {3:[2,2],4:[2,1],77:[2,96],79:[2,57],80:[2,58],81:[2,59],124:[2,93],170:[2,94],177:[2,126],178:[2,127],194:[2,131],195:[2,132]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = global_jison_filename + ':' + (yylineno+1) + ':parse error'+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = global_jison_filename + ':' + (yylineno+1) + ':parse error'+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


function prep(np) {
 return np.elements[1] ? np.elements[0] : false;
}

function last(np) {
  return  np.elements[1] ? np.elements[1] : np.elements[0];
}

function loc (source, first, last) {
	return new ast.Location (source, new ast.Position (first.first_line, first.first_column), new ast.Position (last.last_line, last.last_column));
}

/* Begin Parser Customization Methods */
var _originalParseMethod = parser.parse;

parser.parse = function (source, args) {
	parser.wasNewLine = false;
	parser.newLine = false;
	parser.restricted = false;

	return _originalParseMethod.call (this, source);
};

parser.parseError = function (str, hash) {
//		alert (JSON.stringify (hash) + '\n\n\n' + parser.newLine + '\n' + parser.wasNewLine + '\n\n' + hash.expected.indexOf ("';'"));
	if (! ( (hash.expected && hash.expected.indexOf ("';'") >= 0) && (hash.token === '}' || hash.token === 'EOF' || hash.token === 'BR++' || hash.token === 'BR--' || parser.newLine || parser.wasNewLine))) {
		throw new SyntaxError (str);
	}
};
/* End Parser Customization Methods */

var ast = require (__dirname + '/ast');
global_jison_filename = '<stdin>';
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                                        if (yy_.yytext.match(/\r|\n/)) {
                                            parser.newLine = true;
                                        }
                                   
break;
case 1:
                                        if (yy_.yytext.match(/\r|\n/)) {
                                            parser.newLine = true;
                                        }
                                   
break;
case 2:
                                        if (yy_.yytext.match(/\r|\n/)) {
                                            parser.newLine = true;
                                        }
                                   
break;
case 3:
                                            yy_.yytext = yy_.yytext.slice (1, -1);
                                            return 63
                                   
break;
case 4:
                                            yy_.yytext = yy_.yytext.slice(6,-1).trim();
                                            return 18;
                                        
break;
case 5:return 68;
break;
case 6:return 73;
break;
case 7:return 69;
break;
case 8:return 40;
break;
case 9:return 41;
break;
case 10:return 35;
break;
case 11:return 80;
break;
case 12:return 78;
break;
case 13:return 58;
break;
case 14:return 79;
break;
case 15:return 11;
break;
case 16:return 61;
break;
case 17:return 112;
break;
case 18:return 32;
break;
case 19:return 74;
break;
case 20:return 75;
break;
case 21:return 34;
break;
case 22:return 71;
break;
case 23:return 118;
break;
case 24:return 72;
break;
case 25:return 76;
break;
case 26:return 77;
break;
case 27:return 106;
break;
case 28:return 108;
break;
case 29:return 84;
break;
case 30:return 84;
break;
case 31:return 105;
break;
case 32:return 53;
break;
case 33:return 25;
break;
case 34:return 120;
break;
case 35:return 56;
break;
case 36:return 49;
break;
case 37:return 62;
break;
case 38:return 66;
break;
case 39:return 119;
break;
case 40:return 117;
break;
case 41:return 44;
break;
case 42:return 115;
break;
case 43:return 51;
break;
case 44:return 46;
break;
case 45:return 22;
break;
case 46:return 7;
break;
case 47:return 110;
break;
case 48:return 114;
break;
case 49:return 109;
break;
case 50:return 45;
break;
case 51:return 48;
break;
case 52:return 121;
break;
case 53:return 50;
break;
case 54:return 122;
break;
case 55:return 27;
break;
case 56:return 59;
break;
case 57:return 67;
break;
case 58:return 55;
break;
case 59:return 9;
break;
case 60:return 70;
break;
case 61:return 10;
break;
case 62:return 12;
break;
case 63:return 60;
break;
case 64:return 5;
break;
case 65:return 'ERROR';
break;
case 66:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\*(.|\r|\n)*?\*\/)/,/^(?:\/\/.*($|\r\n|\r|\n))/,/^(?:\$(\\.|[^\$])*\$)/,/^(?:import[ \t\r]+[_A-Za-z0-9.-]+[ \t\r]*;)/,/^(?:!)/,/^(?:!=)/,/^(?:&&)/,/^(?:\()/,/^(?:\))/,/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:,)/,/^(?:-)/,/^(?:\.)/,/^(?:\.\.)/,/^(?::)/,/^(?:;)/,/^(?:<)/,/^(?:<=)/,/^(?:<=>)/,/^(?:<-)/,/^(?:=)/,/^(?:==)/,/^(?:>)/,/^(?:>=)/,/^(?:\[)/,/^(?:\])/,/^(?:behavior)/,/^(?:behaviour)/,/^(?:blocking)/,/^(?:bool)/,/^(?:component)/,/^(?:else)/,/^(?:enum)/,/^(?:external)/,/^(?:extern)/,/^(?:false)/,/^(?:if)/,/^(?:illegal)/,/^(?:in)/,/^(?:inevitable)/,/^(?:injected)/,/^(?:inout)/,/^(?:interface)/,/^(?:namespace)/,/^(?:on)/,/^(?:optional)/,/^(?:otherwise)/,/^(?:out)/,/^(?:provides)/,/^(?:reply)/,/^(?:requires)/,/^(?:return)/,/^(?:system)/,/^(?:subint)/,/^(?:true)/,/^(?:void)/,/^(?:\{)/,/^(?:\|\|)/,/^(?:\})/,/^(?:(([_a-zA-Z])(([_a-zA-Z])|[0-9])*))/,/^(?:([+-]?[0-9]+))/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"REGEXP":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
/* Begin Lexer Customization Methods */
var _originalLexMethod = lexer.lex;

lexer.lex = function () {
	parser.wasNewLine = parser.newLine;
	parser.newLine = false;

	return _originalLexMethod.call (this);
};
/* End Lexer Customization Methods */;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parse;
exports.Parser = parse.Parser;
exports.parse = function () { return parse.parse.apply(parse, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}